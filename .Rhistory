temp_dataset = read.table(file, header=TRUE, stringsAsFactors=FALSE)
mirNames = rbind.fill(mirNames, temp_dataset)
print("haha!!!!")
rm(temp_dataset)
} else {
print("oh no")
}
}
#INPUT: 1) Lookup table of mature miR names and accession #s (hsa_miR_accessionTOname.txt)
#       2) a directpry of individual miRNA "isofom" level TCGA data matrices downloaded using TCGA-Assembler... i.e:
#################################################################################
#OUTPUT: an udpated data matrix with full miRNA names.
#################################################################################
#change directory to a directory containing files to update and accessionTOname file i.e.: > setwd("Desktop/miRdata/")
library(splitstackshape)
library(qdap)
library(plyr)
library(reshape)
filenames = dir(pattern="*isoform.quantification.txt")
update_miRname = function(infile)
{
tempFile = read.table(infile, header=TRUE, stringsAsFactors=FALSE)
tempFile =cSplit(tempFile, "miRNA_region", sep=",")
full_list = read.table("hsa_miR_accessionTOname.txt", header=TRUE, stringsAsFactors=FALSE)
tempFile$fullName = lookup(tempFile$miRNA_region_2, full_list$Alias, full_list$Name)
temp2 = data.frame(tempFile$fullName, tempFile$read_count)
colnames(temp2) = c("miRNA", "Count")
write.table(tempFile, file=paste(infile, ".names.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
write.table(temp2, file=paste(infile, ".counts.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
temp3 = temp2[!(is.na(temp2[,1])),]
temp3 = temp3[order(temp3[,1]), ]
temp3 = aggregate(data=temp3, temp3[,2] ~ temp3[,1], FUN=sum)
colnames(temp3) = c("miRNA", infile)
write.table(temp3, file=paste(infile, ".sumSort.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
}
lapply(filenames, update_miRname)
#next need to join all the data matrix files into one matrix
mergeFiles = list.files(pattern="*sumSort.txt")
mirNames = data.table(NULL)
for (file in mergeFiles){
if(!exists("mirNames")){
mirNames = read.table(file, header=TRUE, stringsAsFactors=FALSE)
dim(mirNames)
}
if(exists("mirNames")){
temp_dataset = read.table(file, header=TRUE, stringsAsFactors=FALSE)
mirNames = rbind.fill(mirNames, temp_dataset)
print("haha!!!!")
rm(temp_dataset)
} else {
print("oh no")
}
}
mirNames = as.matrix(mirNames[,1])
mirNames = as.data.frame((sort(unique(mirNames))))
colnames(mirNames) = "miRNA"
# merge each file with this generated names column, putting zero if no match
import.list <- llply(mergeFiles, read.table, header=TRUE)
data_matrix =join(mirNames, as.data.frame(import.list[1]), by= "miRNA", type="left")
for(i in 2:length(mergeFiles)){
data_matrix =join(data_matrix, as.data.frame(import.list[i]), by= "miRNA", type="left")
}
data_matrix[is.na(data_matrix)] = 0
write.table(data_matrix, file="miR_counts_matrix.txt", sep="\t", col.names=TRUE, row.names=FALSE)
mirNames
#INPUT: 1) Lookup table of mature miR names and accession #s (hsa_miR_accessionTOname.txt)
#       2) a directpry of individual miRNA "isofom" level TCGA data matrices downloaded using TCGA-Assembler... i.e:
#################################################################################
#OUTPUT: an udpated data matrix with full miRNA names.
#################################################################################
#change directory to a directory containing files to update and accessionTOname file i.e.: > setwd("Desktop/miRdata/")
library(splitstackshape)
library(qdap)
library(plyr)
library(reshape)
filenames = dir(pattern="*isoform.quantification.txt")
update_miRname = function(infile)
{
tempFile = read.table(infile, header=TRUE, stringsAsFactors=FALSE)
tempFile =cSplit(tempFile, "miRNA_region", sep=",")
full_list = read.table("hsa_miR_accessionTOname.txt", header=TRUE, stringsAsFactors=FALSE)
tempFile$fullName = lookup(tempFile$miRNA_region_2, full_list$Alias, full_list$Name)
temp2 = data.frame(tempFile$fullName, tempFile$read_count)
colnames(temp2) = c("miRNA", "Count")
write.table(tempFile, file=paste(infile, ".names.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
write.table(temp2, file=paste(infile, ".counts.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
temp3 = temp2[!(is.na(temp2[,1])),]
temp3 = temp3[order(temp3[,1]), ]
temp3 = aggregate(data=temp3, temp3[,2] ~ temp3[,1], FUN=sum)
colnames(temp3) = c("miRNA", infile)
write.table(temp3, file=paste(infile, ".sumSort.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
}
lapply(filenames, update_miRname)
#next need to join all the data matrix files into one matrix
mergeFiles = list.files(pattern="*sumSort.txt")
mirNames = data.table(NULL)
for (file in mergeFiles){
if(!exists("mirNames")){
mirNames = read.table(file, header=TRUE, stringsAsFactors=FALSE)
dim(mirNames)
}
if(exists("mirNames")){
temp_dataset = read.table(file, header=TRUE, stringsAsFactors=FALSE)
mirNames = rbind.fill(mirNames, temp_dataset)
print("haha!!!!")
rm(temp_dataset)
} else {
print("oh no")
}
}
mirNames = as.matrix(mirNames[,1])
mirNames = as.data.frame((sort(unique(mirNames))))
colnames(mirNames) = "miRNA"
# merge each file with this generated names column, putting zero if no match
import.list <- llply(mergeFiles, read.table, header=TRUE)
data_matrix =join(mirNames, as.data.frame(import.list[1]), by= "miRNA", type="left")
for(i in 2:length(mergeFiles)){
data_matrix =join(data_matrix, as.data.frame(import.list[i]), by= "miRNA", type="left")
}
data_matrix[is.na(data_matrix)] = 0
write.table(data_matrix, file="miR_counts_matrix.txt", sep="\t", col.names=TRUE, row.names=FALSE)
unloadNamespace('data.table')
unloadNamespace('reshape2')
unloadNamespace('plyr')
install.packages("data.table", type="source", dependencies=TRUE)
#INPUT: 1) Lookup table of mature miR names and accession #s (hsa_miR_accessionTOname.txt)
#       2) a directpry of individual miRNA "isofom" level TCGA data matrices downloaded using TCGA-Assembler... i.e:
#################################################################################
#OUTPUT: an udpated data matrix with full miRNA names.
#################################################################################
#change directory to a directory containing files to update and accessionTOname file i.e.: > setwd("Desktop/miRdata/")
library(splitstackshape)
library(qdap)
library(plyr)
library(reshape)
filenames = dir(pattern="*isoform.quantification.txt")
update_miRname = function(infile)
{
tempFile = read.table(infile, header=TRUE, stringsAsFactors=FALSE)
tempFile =cSplit(tempFile, "miRNA_region", sep=",")
full_list = read.table("hsa_miR_accessionTOname.txt", header=TRUE, stringsAsFactors=FALSE)
tempFile$fullName = lookup(tempFile$miRNA_region_2, full_list$Alias, full_list$Name)
temp2 = data.frame(tempFile$fullName, tempFile$read_count)
colnames(temp2) = c("miRNA", "Count")
write.table(tempFile, file=paste(infile, ".names.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
write.table(temp2, file=paste(infile, ".counts.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
temp3 = temp2[!(is.na(temp2[,1])),]
temp3 = temp3[order(temp3[,1]), ]
temp3 = aggregate(data=temp3, temp3[,2] ~ temp3[,1], FUN=sum)
colnames(temp3) = c("miRNA", infile)
write.table(temp3, file=paste(infile, ".sumSort.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
}
lapply(filenames, update_miRname)
#next need to join all the data matrix files into one matrix
mergeFiles = list.files(pattern="*sumSort.txt")
mirNames = data.table(NULL)
for (file in mergeFiles){
if(!exists("mirNames")){
mirNames = read.table(file, header=TRUE, stringsAsFactors=FALSE)
dim(mirNames)
}
if(exists("mirNames")){
temp_dataset = read.table(file, header=TRUE, stringsAsFactors=FALSE)
mirNames = rbind.fill(mirNames, temp_dataset)
print("haha!!!!")
rm(temp_dataset)
} else {
print("oh no")
}
}
mirNames = as.matrix(mirNames[,1])
mirNames = as.data.frame((sort(unique(mirNames))))
colnames(mirNames) = "miRNA"
# merge each file with this generated names column, putting zero if no match
import.list <- llply(mergeFiles, read.table, header=TRUE)
data_matrix =join(mirNames, as.data.frame(import.list[1]), by= "miRNA", type="left")
for(i in 2:length(mergeFiles)){
data_matrix =join(data_matrix, as.data.frame(import.list[i]), by= "miRNA", type="left")
}
data_matrix[is.na(data_matrix)] = 0
write.table(data_matrix, file="miR_counts_matrix.txt", sep="\t", col.names=TRUE, row.names=FALSE)
install.packages("data.table")
setwd("~/Desktop/tumor-origin/data-prep")
#INPUT: 1) Lookup table of mature miR names and accession #s (hsa_miR_accessionTOname.txt)
#       2) a directpry of individual miRNA "isofom" level TCGA data matrices downloaded using TCGA-Assembler... i.e:
#################################################################################
#OUTPUT: an udpated data matrix with full miRNA names.
#################################################################################
#change directory to a directory containing files to update and accessionTOname file i.e.: > setwd("Desktop/miRdata/")
#setwd("~/Desktop/tumor-origin/data")
library(splitstackshape)
#library(qdap)
library(plyr)
library(reshape)
# filenames = dir(pattern="*isoforms.quantification.txt")
filenames = dir(pattern="*.isoforms.quantification.txt$")
update_miRname = function(infile)
{
tempFile = read.table(infile, header=TRUE, stringsAsFactors=FALSE)
tempFile =cSplit(tempFile, "miRNA_region", sep=",")
full_list = read.table("hsa_miR_accessionTOname.txt", header=TRUE, stringsAsFactors=FALSE)
# change Alias to match column title in tempFile
full_list = setNames(full_list,c('miRNA_region_2','fullName'))
mergedFile = merge(tempFile, full_list, by.x="miRNA_region_2", by.y="miRNA_region_2")
#tempFile$fullName = lookup(tempFile$miRNA_region_2, full_list$Alias, full_list$Name)
#temp2 = data.frame(mergedFile$fullName, mergedFile$read_count)
temp2 = data.frame(mergedFile$fullName, mergedFile$reads_per_million_miRNA_mapped)
colnames(temp2) = c("miRNA", "Count")
write.table(tempFile, file=paste("temp/", infile, ".names.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
write.table(temp2, file=paste("temp/", infile, ".counts.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
temp3 = temp2[!(is.na(temp2[,1])),]
temp3 = temp3[order(temp3[,1]), ]
temp3 = aggregate(data=temp3, temp3[,2] ~ temp3[,1], FUN=sum)
colnames(temp3) = c("miRNA", infile)
write.table(temp3, file=paste("temp/", infile, ".sumSort.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
}
lapply(filenames, update_miRname)
#next need to join all the data matrix files into one matrix
mergeFiles = list.files(path="temp/", pattern="*sumSort.txt")
for (file in mergeFiles){
if(!exists("mirNames")){
mirNames = read.table(paste("temp/", file, sep=""), header=TRUE, stringsAsFactors=FALSE)
dim(mirNames)
}
if(exists("mirNames")){
temp_dataset = read.table(paste("temp/", file, sep=""), header=TRUE, stringsAsFactors=FALSE)
mirNames = rbind.fill(mirNames, temp_dataset)
rm(temp_dataset)
}
}
mirNames = as.matrix(mirNames[,1])
mirNames = as.data.frame((sort(unique(mirNames))))
colnames(mirNames) = "miRNA"
# merge each file with this generated names column, putting zero if no match
#setwd("~/Desktop/tumor-origin/data/temp")
#append temp/ to path of sumSort files
mergeFiles <- paste("temp/", mergeFiles, sep="")
import.list <- llply(mergeFiles, read.table, check.names=FALSE, header=TRUE)
data_matrix =join(mirNames, as.data.frame(import.list[1]), by= "miRNA", type="left")
for(i in 2:length(mergeFiles)){
data_matrix =join(data_matrix, as.data.frame(import.list[i]), by= "miRNA", type="left")
}
data_matrix[is.na(data_matrix)] = 0
write.table(data_matrix, file="miR_counts_matrix.txt", sep="\t", col.names=TRUE, row.names=FALSE)
# transpose!!
# rows = samples
# columns = features
t_df <- data.frame(t(data_matrix[-1]))
colnames(t_df) <- data_matrix[,1]
#df2 <- data.frame(t(data_matrix[-1]))
#colnames(df2) <- data_matrix[,1]
#col.names=NA creates a header for row names...
write.table(t_df, file="miR_counts_transposed.txt", sep="\t", col.names=NA, row.names=TRUE)
#######################################
# get tumor/normal and add as a column!
#######################################
# add tumor/normal sample labels
labels <- read.table("sample_labels.txt",  header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(labels) <- c("file", "sample type")
# get file substring for LABELS and replace - with . for comparison
labels$file <- gsub("-", ".", labels$file)
labels$file <- substring(labels$file,1,36)
# get file substring for DATAMATRIX
newLabels <- list()
i <- 1
for(sample in rownames(t_df)) {
if(substring(sample,1,1) == "X") {
sample <- substring(sample,2,37)
} else {
sample <- substring(sample,1,36)
}
newLabels[i] = sample
i<-i+1
}
newLabels <- data.frame(newLabels, stringsAsFactors = FALSE)
rownames(t_df) <- newLabels
t_df$file <- rownames(t_df)
# Merge by sample name (file name)
labeled_data <- merge(t_df,labels,by="file")
write.table(labeled_data, file="miR_counts_labeled.txt", sep="\t", col.names=NA, row.names=TRUE)
blca = read.table("expression_matrix_blca.txt", header=TRUE, stringsAsFactors=FALSE)
setwd("~/Desktop/tumor-origin")
blca = read.table("expression_matrix_blca.txt", header=TRUE, stringsAsFactors=FALSE)
dim(blca)
dim(chol)
chol = read.table("expression_matrix_chol.txt", header=TRUE, stringsAsFactors=FALSE)
dim(chol)
#
#
setwd("~/Desktop/tumor-origin")
blca = read.table("expression_matrix_blca.txt", header=TRUE, stringsAsFactors=FALSE)
dim(blca)
# samples, miRNAs
chol = read.table("expression_matrix_chol.txt", header=TRUE, stringsAsFactors=FALSE)
dim(chol)
coad = read.table("expression_matrix_coad.txt", header=TRUE, stringsAsFactors=FALSE)
dim(coad)
esca = read.table("expression_matrix_esca.txt", header=TRUE, stringsAsFactors=FALSE)
dim(esca)
esca$file
esca$sample.type
colnames(blca)
tail(colnames(blca))
blca$tissue.type = "BLCA"
blca$tissue.type
rownames(chol)
chol$file
#
#
setwd("~/Desktop/tumor-origin")
blca = read.table("expression_matrix_blca.txt", header=TRUE, stringsAsFactors=FALSE)
blca$tissue.type = "BLCA"
dim(blca)
# samples, miRNAs
chol = read.table("expression_matrix_chol.txt", header=TRUE, stringsAsFactors=FALSE)
chol$tissue.type = "CHOL"
dim(chol)
coad = read.table("expression_matrix_coad.txt", header=TRUE, stringsAsFactors=FALSE)
coad$tissue.type = "COAD"
dim(coad)
esca = read.table("expression_matrix_esca.txt", header=TRUE, stringsAsFactors=FALSE)
esca$tissue.type = "ESCA"
dim(esca)
chol$tissue.type = chol$tissue.type+"lol"
chol$tissue.type = paste(chol$tissue.type,"test")
chol$tissue.type
chol$tissue.type = paste(chol$tissue.type,"test",sep="")
chol$tissue.type
chol$tissue.type="CHOL"
chol$tissue.type
#
#
setwd("~/Desktop/tumor-origin")
blca = read.table("expression_matrix_blca.txt", header=TRUE, stringsAsFactors=FALSE)
blca$tissue.type = "BLCA"
blca$file = paste(blca$file,"BLCA",sep=".")
dim(blca)
# samples, miRNAs
chol = read.table("expression_matrix_chol.txt", header=TRUE, stringsAsFactors=FALSE)
chol$tissue.type = "CHOL"
chol$file = paste(chol$file,"CHOL",sep=".")
dim(chol)
coad = read.table("expression_matrix_coad.txt", header=TRUE, stringsAsFactors=FALSE)
coad$tissue.type = "COAD"
coad$file = paste(coad$file,"COAD",sep=".")
dim(coad)
esca = read.table("expression_matrix_esca.txt", header=TRUE, stringsAsFactors=FALSE)
esca$tissue.type = "ESCA"
esca$file = paste(esca$file, "ESCA", sep=".")
dim(esca)
esca$file
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
blca = read.table("miR_counts_blca.txt", header=TRUE, stringsAsFactors=FALSE)
blca$hsa.let.7a.2.3p
blca = read.table("miR_counts_blca.txt", header=TRUE, stringsAsFactors=FALSE)
test = read.table("expression_matrix_blca.txt", header=TRUE, stringsAsFactors=FALSE)
lol = read.table("miR_counts_blca.txt", header=TRUE, stringsAsFactors=FALSE)
blca = read.table("miR_counts_blca.txt", header=TRUE, stringsAsFactors=FALSE)
blca$X12eb7740.c87e.47d0.ac01.074360f65d7b.mirbase21.isoforms.quantification.txt
head(blca)
colnames(blca)
rownames(blca)
dge_blca = DGEList(counts=counts)
library("edgeR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR", version = "3.8")
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR")
dge_blca = DGEList(counts=counts)
dge_blca = DGEList(counts=counts)
library(edgeR)
dge_blca = DGEList(counts=counts)
dge_blca = DGEList(counts=blca$miRNA)
dge_blca = DGEList(counts=blca)
dge_blca = DGEList(counts=blca[-1])
dge_blca
keep <- filterByExpr(dge, design)
keep <- filterByExpr(dge_blca, design)
design <- modelMatrix(dge_blca,ref="EGFP")
design <- modelMatrix(dge_blca,ref="miRNA")
metadata_blca = read.table("expression_matrix_labeled.txt", header= TRUE, stringAsFactors=FALSE)
metadata_blca = read.table("expression_matrix_labeled.txt", header= TRUE, stringsAsFactors=FALSE)
metadata_blca = read.table("expression_matrix_labeled_blca.txt", header= TRUE, stringsAsFactors=FALSE)
metadata_blca = read.table("expression_matrix_blca.txt", header= TRUE, stringsAsFactors=FALSE)
metadata_blca$sample.type
design <- paste(metadata_blca$sample.type, sep="")
design
design <- factor(design)
design
keep <- filterByExpr(dge_blca, design)
keep
dge <- dge[keep,,keep.lib.sizes=FALSE]
dge <- dge_blca[keep,,keep.lib.sizes=FALSE]
dge
dge_blca <- dge_blca[keep,,keep.lib.sizes=FALSE]
dim(blca)
dim(dge_blca)
dim(chol)
dge_blca
write.table(dge_blca, file="dge_blca.txt", sep="\t", col.names=NA, row.names=TRUE)
write.table(dge_blca, file="dge_blca.txt", sep="\t", col.names=TRUE, row.names=TRUE)
write.table(dge_blca, file="dge_blca.txt", sep="\t", col.names=TRUE, row.names=NA)
capture.output(dge_blca, file = "dge_blca.txt")
dge_blca$counts
dge_blca$samples
head(dge_blca)
head(data.frame(dge_blca))
dge_blca$counts
dim(dge_blca)
dim(blca)
dge_blca <- calcNormFactors(dge_blca)
dim(dge_blca)
logCPM <- cpm(dge_blca, log=TRUE, prior.count=3)
dim(logCPM)
fit <- lmFit(logCPM, design)
fit <- eBayes(fit, trend=TRUE)
topTable(fit, coef=ncol(design))
design
is.data.frame(design)
is.matrix(design)
is.array(design)
is.na(design)
is.vector(design)
x <- 1:length(design)
x
x[1]
x[4]
for(index in design) {
if (design[index] == "Solid Normal Tissue") {
nDesign[index] = 0;
} else {  # metastatic or primary tumor
nDesing[index] = 1;
}
}
design[5]
design[9]
design[4] == Primary Tumor
design[4] == "Primary Tumor"
nDesign <- 1:length(design)
for(index in length(design)) {
if (design[index] == "Solid Tissue Normal") {
nDesign[index] = 0;
} else {  # metastatic or primary tumor
nDesing[index] = 1;
}
}
nDesign <- 1:length(design)
for(index in length(design)) {
if (design[index] == "Solid Tissue Normal") {
nDesign[index] = 0;
} else {  # metastatic or primary tumor
nDesign[index] = 1;
}
}
nDesign
for(index in length(design)) {
if (design[index] == "Solid Tissue Normal") {
nDesign[index] = 0;
} else {  # metastatic or primary tumor
nDesign[index] = 1;
}
print(index)
}
i <- 0
for(sample_type in design) {
if (sample_type == "Solid Tissue Normal") {
nDesign[i] = 0;
} else {  # metastatic or primary tumor
nDesign[i] = 1;
}
i<-i+1
}
nDesign
fit <- lmFit(logCPM, nDesign)
fit <- eBayes(fit, trend=TRUE)
topTable(fit, coef=ncol(nDesign))
dim(fit)
fit
i <- 0
for(sample_type in design) {
if (sample_type == "Solid Tissue Normal") {
nDesign[i] = 2;
} else {  # metastatic or primary tumor
nDesign[i] = 1;
}
i<-i+1
}
fit <- lmFit(logCPM, nDesign)
fit <- eBayes(fit, trend=TRUE)
topTable(fit, coef=ncol(nDesign))
topTable(fit, coef=ncol(design))
v <- voom(dge_blca, design, plot=TRUE)
v <- voom(dge_blca, nDesign, plot=TRUE)
i <- 0
for(sample_type in design) {
if (sample_type == "Solid Tissue Normal") {
nDesign[i] = 0;
} else {  # metastatic or primary tumor
nDesign[i] = 1;
}
i<-i+1
}
v <- voom(dge_blca, nDesign, plot=TRUE)
fit <- lmFit(v, nDesign)
fit <- eBayes(fit, trend=TRUE)
topTable(fit, coef=ncol(design))
v <- voom(dge_blca, nDesign, plot=TRUE)
fit <- lmFit(v, nDesign)
fit <- eBayes(fit, trend=TRUE)
topTable(fit, coef=ncol(design))
