lol <- cbind(df3, labels[match(rownames(df3),labels$file)])
lol <- cbind(df3, labels[,"sample type"][match(rownames(df3),labels$file)])
lol$`labels[, "sample type"][match(rownames(df3), labels$file)]`
lol <- merge(df3, labels, by.x=0, by.y="file")
for(name in rownames(df3)) {
print(name)
for (file in labels$file) {
if(file == name) {
print(file)
}
}
}
lol <- merge(df3, labels, by.x=0, by.y=1)
lol
lol <- merge(df3, labels, by.x=0, by.y=0)
lol
df4 <- df3[, -1]
df4
colnames(DF4)[1] <- "miRNA"
colnames(df4)[1] <- "miRNA"
colnames(df4)
df4
write.table(df4, file="df4.txt", sep="\t", col.names=NA, row.names=TRUE)
write.table(df4, file="df4.txt", sep="\t", col.names=TRUE, row.names=TRUE)
df4 <- df3[, -1]
df4
write.table(df4, file="df4.txt", sep="\t", col.names=TRUE, row.names=TRUE)
df4 <- df3
df4 <- cbind(row.names = rownames(df4), df4)
df4
write.table(df4, file="df4.txt", sep="\t", col.names=TRUE, row.names=TRUE)
rownames(df4)
rownames(df3)
colnames(df3)
df4<-df3
myMat <- as.matrix(df4)
myMat
names(dimnames(myMat)) <- c("samples", "")
myMat
df4 <- df3
df4$samples <- rownames(df4)
write.table(df4, file="df4.txt", sep="\t", col.names=TRUE, row.names=TRUE)
write.table(df4, file="df4.txt", sep="\t", col.names=NA, row.names=TRUE)
df4$file <- rownames(df4)
df4$file
labels$file
merge(df4, labels, by="file")
merge(df4, labels, by.x="file". by.y="file")
merge(df4, labels, by.x="file", by.y="file")
write.table(labels, file="labels.txt", sep="\t", col.names=NA, row.names=TRUE)
df4$file
for(name in df4$file) {
for (file in labels$file) {
if(file == name) {
print(file)
}
}
}
rownames(df3)
for(name in df4$file) {
for (file in rownames(df3)) {
if(file == name) {
print(file)
}
}
}
for(name in rownames(df3)) {
for (file in labels$file) {
if(file == name) {
print(file)
}
}
}
for(name in rownames(df3)) {
for (file in labels$file) {
if(file == name) {
print(file)
}
}
}
}
rownames(transposed_df)
# add tumor/normal sample labels
labels <- read.table("isoforms.txt",  header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(labels) <- c("file", "sample type")
fileLabels <- list()
i <- 1
for(file in labels$file) {
file <- substring(file,1,36)
fileLabels[i] = file
i<-i+1
}
fileLabels
labels$file <- fileLabels
labels$file
# add tumor/normal sample labels
labels <- read.table("isoforms.txt",  header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(labels) <- c("file", "sample type")
fileLabels <- list()
i <- 1
for(file in labels$file) {
file <- substring(file,1,36)
fileLabels[i] = file
i<-i+1
}
labels$file <- data.frame(fileLabels, stringsAsFactors = FALSE)
fileLabels
labels$file
fileLabels
fileLabels <- data.frame(fileLabels, stringsAsFactors = FALSE)
label$files <- fileLabels
labels$file
labels$file <- gsub("-", ".", labels$file)
labels$file
labels$file <- substring(labels$file,1,36)
labels$file
df3 <- transposed_df
rownames(df3)
newLabels <- list()
i <- 1
for(sample in rownames(df3)) {
if(substring(sample,1,1) == "X") {
sample <- substring(sample,2,37)
} else {
sample <- substring(sample,1,36)
}
newLabels[i] = sample
i<-i+1
}
newLabels <- data.frame(newLabels, stringsAsFactors = FALSE)
rownames(df3) <- newLabels
rownames(df3)
df3<-df2
# trim sample IDs
newLabels <- list()
i <- 1
for(sample in rownames(df3)) {
if(substring(sample,1,1) == "X") {
sample <- substring(sample,2,37)
} else {
sample <- substring(sample,1,36)
}
newLabels[i] = sample
i<-i+1
}
newLabels <- data.frame(newLabels, stringsAsFactors = FALSE)
rownames(df3) <- newLabels
rownames(df3)
df3$file <- rownames(df3)
merge(df3,labels,by="file")
lol <- merge(df3,labels,by="file")
write.table(lol, file="merged.txt", sep="\t", col.names=NA, row.names=TRUE)
#INPUT: 1) Lookup table of mature miR names and accession #s (hsa_miR_accessionTOname.txt)
#       2) a directpry of individual miRNA "isofom" level TCGA data matrices downloaded using TCGA-Assembler... i.e:
#################################################################################
#OUTPUT: an udpated data matrix with full miRNA names.
#################################################################################
#change directory to a directory containing files to update and accessionTOname file i.e.: > setwd("Desktop/miRdata/")
#setwd("~/Desktop/tumor-origin/data")
library(splitstackshape)
#library(qdap)
library(plyr)
library(reshape)
# filenames = dir(pattern="*isoforms.quantification.txt")
filenames = dir(pattern="*.isoforms.quantification.txt$")
update_miRname = function(infile)
{
tempFile = read.table(infile, header=TRUE, stringsAsFactors=FALSE)
tempFile =cSplit(tempFile, "miRNA_region", sep=",")
full_list = read.table("hsa_miR_accessionTOname.txt", header=TRUE, stringsAsFactors=FALSE)
# change Alias to match column title in tempFile
full_list = setNames(full_list,c('miRNA_region_2','fullName'))
mergedFile = merge(tempFile, full_list, by.x="miRNA_region_2", by.y="miRNA_region_2")
#tempFile$fullName = lookup(tempFile$miRNA_region_2, full_list$Alias, full_list$Name)
temp2 = data.frame(mergedFile$fullName, mergedFile$read_count)
colnames(temp2) = c("miRNA", "Count")
write.table(tempFile, file=paste("temp/", infile, ".names.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
write.table(temp2, file=paste("temp/", infile, ".counts.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
temp3 = temp2[!(is.na(temp2[,1])),]
temp3 = temp3[order(temp3[,1]), ]
temp3 = aggregate(data=temp3, temp3[,2] ~ temp3[,1], FUN=sum)
colnames(temp3) = c("miRNA", infile)
write.table(temp3, file=paste("temp/", infile, ".sumSort.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
}
lapply(filenames, update_miRname)
#next need to join all the data matrix files into one matrix
mergeFiles = list.files(path="temp/", pattern="*sumSort.txt")
for (file in mergeFiles){
if(!exists("mirNames")){
mirNames = read.table(paste("temp/", file, sep=""), header=TRUE, stringsAsFactors=FALSE)
dim(mirNames)
}
if(exists("mirNames")){
temp_dataset = read.table(paste("temp/", file, sep=""), header=TRUE, stringsAsFactors=FALSE)
mirNames = rbind.fill(mirNames, temp_dataset)
rm(temp_dataset)
}
}
mirNames = as.matrix(mirNames[,1])
mirNames = as.data.frame((sort(unique(mirNames))))
colnames(mirNames) = "miRNA"
# merge each file with this generated names column, putting zero if no match
#setwd("~/Desktop/tumor-origin/data/temp")
#append temp/ to path of sumSort files
mergeFiles <- paste("temp/", mergeFiles, sep="")
import.list <- llply(mergeFiles, read.table, check.names=FALSE, header=TRUE)
data_matrix =join(mirNames, as.data.frame(import.list[1]), by= "miRNA", type="left")
for(i in 2:length(mergeFiles)){
data_matrix =join(data_matrix, as.data.frame(import.list[i]), by= "miRNA", type="left")
}
data_matrix[is.na(data_matrix)] = 0
# transpose!!
# rows = samples
# columns = features
t_df <- data.frame(t(data_matrix[-1]))
colnames(t_df) <- c(data_matrix[1])
#df2 <- data.frame(t(data_matrix[-1]))
#colnames(df2) <- data_matrix[,1]
#col.names=NA creates a header for row names...
write.table(t_df, file="miR_counts.txt", sep="\t", col.names=NA, row.names=TRUE)
#####
# get tumor/normal and add as a column!
#####
# add tumor/normal sample labels
labels <- read.table("sample_labels.txt",  header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(labels) <- c("file", "sample type")
# get file substring for LABELS and replace - with . for comparison
labels$file <- gsub("-", ".", labels$file)
labels$file <- substring(labels$file,1,36)
# get file substring for DATAMATRIX
newLabels <- list()
i <- 1
for(sample in rownames(df3)) {
if(substring(sample,1,1) == "X") {
sample <- substring(sample,2,37)
} else {
sample <- substring(sample,1,36)
}
newLabels[i] = sample
i<-i+1
}
newLabels <- data.frame(newLabels, stringsAsFactors = FALSE)
rownames(df3) <- newLabels
# Merge by sample name (file name)
labeled_data <- merge(df3,labels,by="file")
write.table(labeled_data, file="miR_counts_labeled.txt", sep="\t", col.names=NA, row.names=TRUE)
t_sf
t_df
#INPUT: 1) Lookup table of mature miR names and accession #s (hsa_miR_accessionTOname.txt)
#       2) a directpry of individual miRNA "isofom" level TCGA data matrices downloaded using TCGA-Assembler... i.e:
#################################################################################
#OUTPUT: an udpated data matrix with full miRNA names.
#################################################################################
#change directory to a directory containing files to update and accessionTOname file i.e.: > setwd("Desktop/miRdata/")
#setwd("~/Desktop/tumor-origin/data")
library(splitstackshape)
#library(qdap)
library(plyr)
library(reshape)
# filenames = dir(pattern="*isoforms.quantification.txt")
filenames = dir(pattern="*.isoforms.quantification.txt$")
update_miRname = function(infile)
{
tempFile = read.table(infile, header=TRUE, stringsAsFactors=FALSE)
tempFile =cSplit(tempFile, "miRNA_region", sep=",")
full_list = read.table("hsa_miR_accessionTOname.txt", header=TRUE, stringsAsFactors=FALSE)
# change Alias to match column title in tempFile
full_list = setNames(full_list,c('miRNA_region_2','fullName'))
mergedFile = merge(tempFile, full_list, by.x="miRNA_region_2", by.y="miRNA_region_2")
#tempFile$fullName = lookup(tempFile$miRNA_region_2, full_list$Alias, full_list$Name)
temp2 = data.frame(mergedFile$fullName, mergedFile$read_count)
colnames(temp2) = c("miRNA", "Count")
write.table(tempFile, file=paste("temp/", infile, ".names.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
write.table(temp2, file=paste("temp/", infile, ".counts.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
temp3 = temp2[!(is.na(temp2[,1])),]
temp3 = temp3[order(temp3[,1]), ]
temp3 = aggregate(data=temp3, temp3[,2] ~ temp3[,1], FUN=sum)
colnames(temp3) = c("miRNA", infile)
write.table(temp3, file=paste("temp/", infile, ".sumSort.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
}
lapply(filenames, update_miRname)
#next need to join all the data matrix files into one matrix
mergeFiles = list.files(path="temp/", pattern="*sumSort.txt")
for (file in mergeFiles){
if(!exists("mirNames")){
mirNames = read.table(paste("temp/", file, sep=""), header=TRUE, stringsAsFactors=FALSE)
dim(mirNames)
}
if(exists("mirNames")){
temp_dataset = read.table(paste("temp/", file, sep=""), header=TRUE, stringsAsFactors=FALSE)
mirNames = rbind.fill(mirNames, temp_dataset)
rm(temp_dataset)
}
}
mirNames = as.matrix(mirNames[,1])
mirNames = as.data.frame((sort(unique(mirNames))))
colnames(mirNames) = "miRNA"
# merge each file with this generated names column, putting zero if no match
#setwd("~/Desktop/tumor-origin/data/temp")
#append temp/ to path of sumSort files
mergeFiles <- paste("temp/", mergeFiles, sep="")
import.list <- llply(mergeFiles, read.table, check.names=FALSE, header=TRUE)
data_matrix =join(mirNames, as.data.frame(import.list[1]), by= "miRNA", type="left")
for(i in 2:length(mergeFiles)){
data_matrix =join(data_matrix, as.data.frame(import.list[i]), by= "miRNA", type="left")
}
data_matrix[is.na(data_matrix)] = 0
# transpose!!
# rows = samples
# columns = features
t_df <- data.frame(t(data_matrix[-1]))
colnames(t_df) <- c(data_matrix[1])
#df2 <- data.frame(t(data_matrix[-1]))
#colnames(df2) <- data_matrix[,1]
#col.names=NA creates a header for row names...
write.table(t_df, file="miR_counts.txt", sep="\t", col.names=NA, row.names=TRUE)
#####
# get tumor/normal and add as a column!
#####
# add tumor/normal sample labels
labels <- read.table("sample_labels.txt",  header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(labels) <- c("file", "sample type")
# get file substring for LABELS and replace - with . for comparison
labels$file <- gsub("-", ".", labels$file)
labels$file <- substring(labels$file,1,36)
# get file substring for DATAMATRIX
newLabels <- list()
i <- 1
for(sample in rownames(t_df)) {
if(substring(sample,1,1) == "X") {
sample <- substring(sample,2,37)
} else {
sample <- substring(sample,1,36)
}
newLabels[i] = sample
i<-i+1
}
newLabels <- data.frame(newLabels, stringsAsFactors = FALSE)
rownames(t_df) <- newLabels
t_df
#INPUT: 1) Lookup table of mature miR names and accession #s (hsa_miR_accessionTOname.txt)
#       2) a directpry of individual miRNA "isofom" level TCGA data matrices downloaded using TCGA-Assembler... i.e:
#################################################################################
#OUTPUT: an udpated data matrix with full miRNA names.
#################################################################################
#change directory to a directory containing files to update and accessionTOname file i.e.: > setwd("Desktop/miRdata/")
#setwd("~/Desktop/tumor-origin/data")
library(splitstackshape)
#library(qdap)
library(plyr)
library(reshape)
# filenames = dir(pattern="*isoforms.quantification.txt")
filenames = dir(pattern="*.isoforms.quantification.txt$")
update_miRname = function(infile)
{
tempFile = read.table(infile, header=TRUE, stringsAsFactors=FALSE)
tempFile =cSplit(tempFile, "miRNA_region", sep=",")
full_list = read.table("hsa_miR_accessionTOname.txt", header=TRUE, stringsAsFactors=FALSE)
# change Alias to match column title in tempFile
full_list = setNames(full_list,c('miRNA_region_2','fullName'))
mergedFile = merge(tempFile, full_list, by.x="miRNA_region_2", by.y="miRNA_region_2")
#tempFile$fullName = lookup(tempFile$miRNA_region_2, full_list$Alias, full_list$Name)
temp2 = data.frame(mergedFile$fullName, mergedFile$read_count)
colnames(temp2) = c("miRNA", "Count")
write.table(tempFile, file=paste("temp/", infile, ".names.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
write.table(temp2, file=paste("temp/", infile, ".counts.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
temp3 = temp2[!(is.na(temp2[,1])),]
temp3 = temp3[order(temp3[,1]), ]
temp3 = aggregate(data=temp3, temp3[,2] ~ temp3[,1], FUN=sum)
colnames(temp3) = c("miRNA", infile)
write.table(temp3, file=paste("temp/", infile, ".sumSort.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
}
lapply(filenames, update_miRname)
#next need to join all the data matrix files into one matrix
mergeFiles = list.files(path="temp/", pattern="*sumSort.txt")
for (file in mergeFiles){
if(!exists("mirNames")){
mirNames = read.table(paste("temp/", file, sep=""), header=TRUE, stringsAsFactors=FALSE)
dim(mirNames)
}
if(exists("mirNames")){
temp_dataset = read.table(paste("temp/", file, sep=""), header=TRUE, stringsAsFactors=FALSE)
mirNames = rbind.fill(mirNames, temp_dataset)
rm(temp_dataset)
}
}
mirNames = as.matrix(mirNames[,1])
mirNames = as.data.frame((sort(unique(mirNames))))
colnames(mirNames) = "miRNA"
# merge each file with this generated names column, putting zero if no match
#setwd("~/Desktop/tumor-origin/data/temp")
#append temp/ to path of sumSort files
mergeFiles <- paste("temp/", mergeFiles, sep="")
import.list <- llply(mergeFiles, read.table, check.names=FALSE, header=TRUE)
data_matrix =join(mirNames, as.data.frame(import.list[1]), by= "miRNA", type="left")
for(i in 2:length(mergeFiles)){
data_matrix =join(data_matrix, as.data.frame(import.list[i]), by= "miRNA", type="left")
}
data_matrix[is.na(data_matrix)] = 0
# transpose!!
# rows = samples
# columns = features
t_df <- data.frame(t(data_matrix[-1]))
colnames(t_df) <- c(data_matrix[1])
t_df
data_matrix
head(data_matrix)
t_df <- data.frame(t(data_matrix[-1]))
t_df
colnames(t_df) <- c(data_matrix[,1])
t_df
write.table(t_df, file="miR_counts.txt", sep="\t", col.names=NA, row.names=TRUE)
colnames(t_df) <- c(data_matrix[,1])
colnames(t_df)
colnames(t_df) <- data_matrix[,1]
colnames(t_df)
write.table(t_df, file="miR_counts.txt", sep="\t", col.names=NA, row.names=TRUE)
#INPUT: 1) Lookup table of mature miR names and accession #s (hsa_miR_accessionTOname.txt)
#       2) a directpry of individual miRNA "isofom" level TCGA data matrices downloaded using TCGA-Assembler... i.e:
#################################################################################
#OUTPUT: an udpated data matrix with full miRNA names.
#################################################################################
#change directory to a directory containing files to update and accessionTOname file i.e.: > setwd("Desktop/miRdata/")
#setwd("~/Desktop/tumor-origin/data")
library(splitstackshape)
#library(qdap)
library(plyr)
library(reshape)
# filenames = dir(pattern="*isoforms.quantification.txt")
filenames = dir(pattern="*.isoforms.quantification.txt$")
update_miRname = function(infile)
{
tempFile = read.table(infile, header=TRUE, stringsAsFactors=FALSE)
tempFile =cSplit(tempFile, "miRNA_region", sep=",")
full_list = read.table("hsa_miR_accessionTOname.txt", header=TRUE, stringsAsFactors=FALSE)
# change Alias to match column title in tempFile
full_list = setNames(full_list,c('miRNA_region_2','fullName'))
mergedFile = merge(tempFile, full_list, by.x="miRNA_region_2", by.y="miRNA_region_2")
#tempFile$fullName = lookup(tempFile$miRNA_region_2, full_list$Alias, full_list$Name)
temp2 = data.frame(mergedFile$fullName, mergedFile$read_count)
colnames(temp2) = c("miRNA", "Count")
write.table(tempFile, file=paste("temp/", infile, ".names.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
write.table(temp2, file=paste("temp/", infile, ".counts.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
temp3 = temp2[!(is.na(temp2[,1])),]
temp3 = temp3[order(temp3[,1]), ]
temp3 = aggregate(data=temp3, temp3[,2] ~ temp3[,1], FUN=sum)
colnames(temp3) = c("miRNA", infile)
write.table(temp3, file=paste("temp/", infile, ".sumSort.txt", sep=""),sep="\t",col.names=TRUE, row.names=FALSE)
}
lapply(filenames, update_miRname)
#next need to join all the data matrix files into one matrix
mergeFiles = list.files(path="temp/", pattern="*sumSort.txt")
for (file in mergeFiles){
if(!exists("mirNames")){
mirNames = read.table(paste("temp/", file, sep=""), header=TRUE, stringsAsFactors=FALSE)
dim(mirNames)
}
if(exists("mirNames")){
temp_dataset = read.table(paste("temp/", file, sep=""), header=TRUE, stringsAsFactors=FALSE)
mirNames = rbind.fill(mirNames, temp_dataset)
rm(temp_dataset)
}
}
mirNames = as.matrix(mirNames[,1])
mirNames = as.data.frame((sort(unique(mirNames))))
colnames(mirNames) = "miRNA"
# merge each file with this generated names column, putting zero if no match
#setwd("~/Desktop/tumor-origin/data/temp")
#append temp/ to path of sumSort files
mergeFiles <- paste("temp/", mergeFiles, sep="")
import.list <- llply(mergeFiles, read.table, check.names=FALSE, header=TRUE)
data_matrix =join(mirNames, as.data.frame(import.list[1]), by= "miRNA", type="left")
for(i in 2:length(mergeFiles)){
data_matrix =join(data_matrix, as.data.frame(import.list[i]), by= "miRNA", type="left")
}
data_matrix[is.na(data_matrix)] = 0
write.table(t_df, file="miR_counts_matrix.txt", sep="\t", col.names=TRUE, row.names=FALSE)
# transpose!!
# rows = samples
# columns = features
t_df <- data.frame(t(data_matrix[-1]))
colnames(t_df) <- data_matrix[,1]
#df2 <- data.frame(t(data_matrix[-1]))
#colnames(df2) <- data_matrix[,1]
#col.names=NA creates a header for row names...
write.table(t_df, file="miR_counts_transposed.txt", sep="\t", col.names=NA, row.names=TRUE)
# add tumor/normal sample labels
labels <- read.table("sample_labels.txt",  header=FALSE, stringsAsFactors=FALSE, sep="\t")
colnames(labels) <- c("file", "sample type")
# get file substring for LABELS and replace - with . for comparison
labels$file <- gsub("-", ".", labels$file)
labels$file <- substring(labels$file,1,36)
# get file substring for DATAMATRIX
newLabels <- list()
i <- 1
for(sample in rownames(t_df)) {
if(substring(sample,1,1) == "X") {
sample <- substring(sample,2,37)
} else {
sample <- substring(sample,1,36)
}
newLabels[i] = sample
i<-i+1
}
newLabels <- data.frame(newLabels, stringsAsFactors = FALSE)
rownames(t_df) <- newLabels
# Merge by sample name (file name)
labeled_data <- merge(t_df,labels,by="file")
t_df$file <- rownames(t_df)
t_df$file
labeled_data <- merge(t_df,labels,by="file")
write.table(labeled_data, file="miR_counts_labeled.txt", sep="\t", col.names=NA, row.names=TRUE)
