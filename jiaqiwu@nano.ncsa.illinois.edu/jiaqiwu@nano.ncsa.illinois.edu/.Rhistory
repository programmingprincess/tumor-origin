test = t(data)
test = as.data.frame(test)
rownames(coad_data)
coad_data = read.table("miR_counts_coad.txt", header=TRUE, stringsAsFactors=FALSE)
colnames(coad_data) = trimSamples(coad_data)
dim(coad_data)
# [1] 2149  466
row.names(coad_data) = coad_data$miRNA
coad_data = coad_data[-1]
row.names(blca_data)
rownames(coad_data)
data <- merge(blca_data, brca_data, by="row.names", all=T)
row.names(data) <- data$Row.names
data <- data[,-1]
data <- merge(data, chol_data, by="row.names", all=T)
row.names(data) <- data$Row.names
data <- data[,-1]
data <- merge(data, coad_data, by="row.names", all=T)
row.names(data) <- data$Row.names
data <- data[,-1]
data <- merge(data, esca_data, by="row.names", all=T)
row.names(data) <- data$Row.names
data <- data[,-1]
dim(data)
# [1] 4442 2353
t_data = t(data)
t_data = as.data.frame(t_data)
t_data$type <- c(rep('blca',437), rep('brca',1207), rep('chol',45), rep('coad',464), rep('esca',200))
t_data$type <- as.factor(t_data$type)
t_data$type <- c(rep('blca',437), rep('brca',1207), rep('chol',45), rep('coad',464), rep('esca',200))
t_data$type <- as.factor(t_data$type)
t_data = t(data)
t_data = as.data.frame(t_data)
# add label rows to the cancer type
t_data$type <- c(rep('blca',437), rep('brca',1207), rep('chol',45), rep('coad',464), rep('esca',200))
t_data$type <- as.factor(t_data$type)
# make all NA zero
dim(data)
t_data$type <- c(rep('blca',437), rep('brca',1207), rep('chol',45), rep('coad',465), rep('esca',200))
t_data$type <- as.factor(t_data$type)
t_data$`hsa-let-7a-2-3p`
t_data$`hsa-miR-105-5p`
t_data$`hsa-miR-1287-5p`
t_data[is.na(t_data)] <- 0
t_data[c(1, 437,1644,1689,2154,2354),4440:4443]
# check data frame
t_data[c(1, 437,1644,1689,2154,2354),4440:4442]
t_data[c(1, 437,1644,1689,2154,2354),4439:4441]
t_data[c(1, 437,1644,1689,2154,2354),1:4]
dim(t_data)
dim(data)
t_data[c(1, 437,1644,1689,2154,2354),2306:2308]
t_data[c(1, 437,1644,1689,2154,2354),2306:2309]
library(randomForest)
r <- randomForest(type ~ ., data=t_data, importance=TRUE, do.trace=100)
t_data[c(1, 437,1644,1689,2154,2354),1:3]
names(t_data) <- gsub(pattern='-', replacement='_', x=names(t_data))
t_data[c(1, 437,1644,1689,2154,2354),1:3]
r <- randomForest(type ~ ., data=t_data, importance=TRUE, do.trace=100)
r
roc(r$y, r$votes)
install.packages("pROC")
roc(r$y, r$votes)
library(pROC)
roc(r$y, r$votes)
# random forest for feaaaaature selection
library(randomForest)
r <- randomForest(type ~ ., data=t_data, importance=TRUE, do.trace=100)
r
library(pROC)
roc(r$y, r$votes)
r$y
head(r$y)
r$votes
head(r$votes)
head(r$y)
roc(r$type, r$votes)
roc(r$y, r$votes)
rn <- round(importance(r), 2)
rn
head(rn[order(rn[,6],decreasing=TRUE),],10)
head(rn[order(rn[,6],decreasing=TRUE),],10)
nnmodel = nnet(type ~ ., t_data,size=5,decay=.1,maxit=1000)
library(nnet)
nnmodel = nnet(type ~ ., t_data,size=5,decay=.1,maxit=1000)
data[1,]
head(data[1,])
head(data[,1])
n = nrow(t_data)
t_data[1,]
t_data[,1]
t_data[1,]
set.seed(30)
ntrain = floor(n*0.70)
ii=sample(1:n, ntrain)
t_data_train = t_Data[ii,]
t_data_train = t_data[ii,]
dim(t_data_train)
dim(t_data)
t_data_test=t_data[-ii,]
rfmodel <- randomForest(type ~ ., data=t_data_train, importance=TRUE, do.trace=100)
rfmodel
rfpred <- predict(rfmodel, newdata=t_data_test)
table(rfpred,t_data_test$type)
(108+362+12+155+44)/nrow(t_data_test)
rn <- round(importance(rfmodel), 2)
rn
head(rn[order(rn[,6],decreasing=TRUE),],10)
t_train_undersample = t_data_train[t_data_train$type != "brca"]
t_train_undersample$type
t_train_undersample = subset(t_data_train, type != "brca")
t_train_undersample$type
dim(t_train_undersample)
fs <- t_data[, which(as.numeric(colSums(t_data != 0)) > 1000)]
fs
dim(fs)
dim(t_data)
fs <- t_data[, which(as.numeric(colSums(t_data != 0)) > 10000)]
dim(t_data)
dim(fs)
ggplot(aes(y=hsa_miR_944, x = type), data = t_data) + geom_density()
library(ggplot2)
ggplot(aes(y=hsa_miR_944, x = type), data = t_data) + geom_density()
ggplot(aes(y="hsa_miR_944", x = type), data = t_data) + geom_density()
ggplot(t_daya, aes(x = type)) + geom_density()
ggplot(t_data, aes(x = type)) + geom_density()
ggplot(aes(y=hsa_miR_944, x = type), data = t_data) + geom_boxplot()
head(rn[order(rn[,1], decreasing=TRUE),],10)
ggplot(aes(y=hsa_miR_375, x = type), data = t_data) + geom_boxplot()
ggplot(aes(y=hsa_mir_1975, x = type), data = t_data) + geom_boxplot()
ggplot(aes(y=hsa_miR_944, x = type), data = t_data) + geom_boxplot()
dim(dge_blca)
dim(blca_data)
keep <- filterByExpr(blca_data, design)
dge <- dge[keep,,keep.lib.size=FALSE]
require(limma)
library(edgeR)
keep <- filterByExpr(blca_data, design)
dge <- dge[keep,,keep.lib.size=FALSE]
diff(blca, blca_data)
dim(blca)
dim(blca_data)
blca[1]
colnames(blca)
rownames(blca)
rownames(blca_data)
require(limma)
library(edgeR)
dge_blca = blca_data
keep <- filterByExpr(dge_blca, design)
dge_blca <- dge_blca[keep,,keep.lib.size=FALSE]
dge_blca <- dge_blca[keep,,keep=FALSE]
dge_blca = blca_data
keep <- filterByExpr(dge_blca, design)
dge_blca <- dge_blca[keep,,keep=="TRUE"]
dim(dge_blca)
dge_brca = brca_data
keep <- filterByExpr(dge_brca, design)
dge_brca <- dge_brca[keep,,keep=="TRUE"]
dim(dge_brca)
dim(brca_data)
dge_brca
t(dge_brca)
test = t(dge_brca)
as.data.frame(test)
as.data.frame(test)
head(test)
rownames(test)
colnames(test)
dge = t_data
keep <- filterByExpr(dge, design)
dge <- dge[keep,,keep=="TRUE"]
dge = data
keep <- filterByExpr(dge, design)
dge <- dge[keep,,keep=="TRUE"]
dge = data
keep <- filterByExpr(dge, design)
dge <- dge[keep,,keep.lib.sizes=FALSE]
fsx <- rowSums( counts(t_data, normalized=TRUE) >= 5 ) >= 3
fs <- t_data[, which(colSums(t_data != 0) < 100)]
dim(fs)
dim(t_data)
rownames(fs)
rownames(t_data)
colnames(t_data)
colnames(fs)
fs <- t_data[, which(colSums(t_data != 0) > 1000)]
dim(fs)
colnames(fs)
fs <- t_data[, which(colSums(t_data != 0) > 10)]
dim(fs)
dim(t_data)
rfmodel <- randomForest(type ~ ., data=fs, importance=TRUE, do.trace=100)
rfmodel
fs <- t_data[, which(colSums(t_data != 0) > 100)]
fsn = nrow(fs)
set.seed(30)
fsntrain = floor(fsn*0.70)  # 70% train
fsii=sample(1:fsn, fsntrain)
fs_train = t_data[fsii,]
fs_test = t_data[-fsii,]
rfmodel <- randomForest(type ~ ., data=fs_train, importance=TRUE, do.trace=100)
rfmodel
rfpred <- predict(rfmodel, newdata=fs_test)
table(rfpred,fs_test$type)
rfpred <- predict(rfmodel, newdata=fs_test)
table(rfpred,fs_test$type)
urfpred <- predict(rfmodel, newdata=fs_test)
table(urfpred,fs_test$type)
table(rfpred,fs_train$type)
dim(fs_train)
dim(t_data_train)
dim(fs)
fs_train = fs[fsii,]
fs_test = fs[-fsii,]
dim(fs_train)
rfmodel <- randomForest(type ~ ., data=fs_train, importance=TRUE, do.trace=100)
rfpred <- predict(rfmodel, newdata=fs_test)
table(rfpred,f_test$type)
rfpred <- predict(rfmodel, newdata=fs_test)
table(rfpred,fs_test$type)
(108+363+14+155+47)/nrow(fs_test)
fs <- t_data[, which(colSums(t_data != 0) > 1000)]
fsn = nrow(fs)
set.seed(30)
fsntrain = floor(fsn*0.70)  # 70% train
fsii=sample(1:fsn, fsntrain)
fs_train = fs[fsii,]
fs_test = fs[-fsii,]
rfmodel <- randomForest(type ~ ., data=fs_train, importance=TRUE, do.trace=100)
rfpred <- predict(rfmodel, newdata=fs_test)
table(rfpred,fs_test$type)
dim(fs_train)
dim(t_data_train)
rownames(fs_train)
rownames(t_data_train)
rfpred <- predict(rfmodel, newdata=fs_test)
table(rfpred,fs_test$type)
(108+363+14+155+51)
(108+363+14+155+51)/nrow(fs_test)
dim(fs)
51/(51+12+1+1)
nnmodel = nnet(type ~ ., fs,size=5,decay=.1,maxit=1000)
nnmodel = nnet(type ~ ., t_data,size=5,decay=.1,maxit=1000)
fs <- t_data[, which(colSums(t_data != 0) > 1500)]
dim(fs)
fs <- t_data[, which(colSums(t_data != 0) > 2000)]
dim(fs)
fsn = nrow(fs)
set.seed(30)
fsntrain = floor(fsn*0.70)  # 70% train
fsii=sample(1:fsn, fsntrain)
fs_train = fs[fsii,]
fs_test = fs[-fsii,]
rfmodel <- randomForest(type ~ ., data=fs_train, importance=TRUE, do.trace=100)
rfpred <- predict(rfmodel, newdata=fs_test)
table(rfpred,fs_test$type)
(106+362+13+155+48)/nrow(fs_Test)
(106+362+13+155+48)/nrow(fs_test)
nnmodel = nnet(type ~ ., fs_train,size=5,decay=.1,maxit=1000)
nnmodel = nnet(type ~ ., fs_test,size=5,decay=.1,maxit=1000)
fs <- t_data[, which(colSums(t_data != 0) > 2800)]
dim(fs)
fs <- t_data[, which(colSums(t_data != 0) > 2300)]
dim(fs)
nnmodel = nnet(type ~ ., fs_test,size=5,decay=.1,maxit=1000)
nnmodel = nnet(type ~ ., fs,size=5,decay=.1,maxit=1000)
nnmodel = nnet(type ~ ., fs[1:1],size=5,decay=.1,maxit=1000)
nnmodel = nnet(type ~ ., fs[1:10],size=5,decay=.1,maxit=1000)
nnmodel = nnet(type ~ ., fs[0:10],size=5,decay=.1,maxit=1000)
nnmodel = nnet(type ~ ., fs[0:10],size=5,decay=.1,maxit=1000)
nnmodel = nnet(type ~ ., fs,size=5,decay=.1,maxit=1000)
nnmodel = nnet(type ~ ., fs,size=5,decay=.1,maxit=1000, MaxNWts=1615)
nnyhat = predict(nnmodel, fs_test)
table(nnyhat, fs_test$type)
nnpred <- predict(nnmodel,newdata=fs_test)
table(nnpred, fs_test$type)
table(nnpred, fs_test$type)
nnpred
nnpred <- predict(nnmodel, newdata=fs_test)
table(nnpred,fs_test$type)
dim(nnmodel)
table(nnpred,fs_test$type[-1])
len(nnpred)
length(nnpred)
length(fs_test$type)
length(fs)
nnmodel$n
nnmodel$cm <- table(irisdf$Species[-sampidx], predict(mynn, irisdf[-sampidx, ],
type="class"))
cm <- table(fs$type, predict(nnmodel, fs,type="type"))
cm <- table(fs$type, predict(nnmodel, fs, type="type"))
table(fs$type, predict(nnmodel, fs, type="type"))
table(predict(nnmodel, fs, type="type"),fs$type)
nnmodel$xlevels
table(nnpred,fs_test$type[-1])
table(na.omit(nnpred),fs_test$type[-1])
fs <- t_data[, which(colSums(t_data != 0) > 2300)]
fsn = nrow(fs)
set.seed(30)
fsntrain = floor(fsn*0.70)  # 70% train
fsii=sample(1:fsn, fsntrain)
fs_train = fs[fsii,]
fs_test = fs[-fsii,]
nnmodel = nnet(type ~ ., fs_train,size=5,decay=.1,maxit=100, MaxNWts=1615)
nnpred <- predict(nnmode, newdata=fs_test)
nnpred <- predict(nnmodel, newdata=fs_test)
nnpred
table(nnpred, fs_test$type)
length(nnpred)
length(fs_test$type)
length(rfpred)
table(nnpred, fs_test$type*5)
table(nnpred, fs_test$type)
table(nnpred/5, fs_test$type)
table(nnpred[1:707], fs_test$type)
nnmode <- nnet(type ~ ., data = fs, subset=fs_train, size=1, decay=0.1, maxit=100)
nnmodel <- nnet(type ~ . , data = fs, subset=fs_train, size=1, decay=0.1, maxit=100)
nnmodel = nnet(type ~ ., data=fs, subset=fs_train, size=5,decay=.1,maxit=100, MaxNWts=1615)
nnpred <-predict(nnmodel, newdata=fs_test,type="type")
nnpred <- predict(nnmodel, newdata=fs_test)
length(nnpred)
length(nnmodel)
nnmodel = nnet(type ~ ., fs_train,size=5,decay=.1,maxit=100, MaxNWts=1615)
length(nnmodel)
nnpred <-predict(nnmodel, newdata=fs_test,na.rm=TRUE,type="type")
nnpred <-predict(nnmodel, newdata=fs_test,na.rm=TRUE)
length(nnpred)
rownames(nnpred)
colnames(nnpred)
head(nnpred)
t_nnpred = t(nnpred)
dim(nnpred)
dim(t_nnpred)
tabl(nnpred,fs_test$type)
table(nnpred,fs_test$type)
length(fs_test$type)
length(nnpred)
table(nnpred$brca,fs_test$type)
as.data.frame(nnpred)
table(nnpred$brca,fs_test$type)
table(as.data.frame(nnpred),fs_test$type)
table(as.factor(nnpred),fs_test$type)
rfpred
dim(rfpred)
length(rfpred)
fs <- t_data[, which(colSums(t_data != 0) > 1000)]
fs <- t_data[, which(colSums(t_data != 0) > 1000)]
# split into train and test
n = nrow(fs)
set.seed(30)
ntrain = floor(n*0.70)  # 70% train
ii=sample(1:n, ntrain)
fs_train = fs[ii,]
fs_test = fs[-ii,]
fs <- t_data[, which(colSums(t_data != 0) > 1000)]
# split into train and test
n = nrow(fs)
set.seed(30)
ntrain = floor(n*0.70)  # 70% train
ii=sample(1:n, ntrain)
fs_train = fs[ii,]
fs_test = fs[-ii,]
# random forest for feaaaaature selection
# library(randomForest)
# rfmodel <- randomForest(type ~ ., data=t_data_train, importance=TRUE, do.trace=100)
# rfmodel
library(randomForest)
rfmodel <- randomForest(type ~ ., data=fs_train, importance=TRUE, do.trace=100)
rfmodel
# rfpred <- predict(rfmodel, newdata=t_data_test)
# table(rfpred,t_data_test$type)
rfpred <- predict(rfmodel, newdata=fs_test)
table(rfpred,fs_test$type)
# rfpred blca brca chol coad esca
# blca  108    0    0    0   17
# brca    2  362    2    0    0
# chol    0    0   12    0    0
# coad    0    0    1  155    4
# esca    0    0    0    0   44
# > (108+362+12+155+44)/nrow(t_data_test)
# [1] 0.9632249
# show importance
rn <- round(importance(rfmodel), 2)
rn
head(rn[order(rn[,6],decreasing=TRUE),],10)
library(ggplot2)
nnmodel = nnet(type ~ ., fs_test,size=5,decay=.1,maxit=1000)
nnmodel = nnet(type ~ ., fs_test,size=5,decay=.1,maxit=100,MaxNWts=3655)
nnyhat = predict(nnmodel, fs_test)
dim(nnyhat)
nnyhat_bin = ifelse(nnyhat >0.5 1,0)
nnyhat_bin = ifelse(nnyhat > 0.5, 1,0)
table(nnyhat_bin,fs_test)
table(nnyhat_bin,fs_test$type)
head(nnyhat_bin)
dim(rfpred)
dim(rfmodel)
length(rfpred)
length(nnyhat)
length(nnyhat_bin)
t_nnyhat = t(nnyhat)
length(t_nnyhat)
head(rfpred)
head(nnyhat)
.25+.64+.005+.038+.057
nnyhat = predict(nnmodel, fs_test,type="class")
length(nnyhat)
table(nnyhat,fs_test$type)
dim(nnyhat)
nnyhat
nnmodel = nnet(type ~ ., fs_test,size=5,decay=.1,maxit=1000,MaxNWts=3655)
nnyhat = predict(nnmodel, fs_test,type="class")
table(nnyhat,fs_test$type)
nnmodel = nnet(type ~ ., fs_train,size=5,decay=.1,maxit=1000,MaxNWts=3655)
nnyhat = predict(nnmodel, fs_test,type="class")
table(nnyhat,fs_test$type)
(75+345+147+17)/nrow(fs_test)
(78+345+147+17)/nrow(fs_test)
(78+350+151+28)/nrow(fs_test)
(78+345+147+17)/nrow(fs_test)
nnmodel = nnet(type ~ ., t_data_train,size=5,decay=.1,maxit=1000,MaxNWts=3655)
nnmodel = nnet(type ~ ., t_data_train,size=5,decay=.1,maxit=1000,MaxNWts=11575)
nnyhat = predict(nnmodel, t_data_test,type="class")
table(nnyhat,t_data_test$type)
(62+343+137)/nrow(t_data_test)
setwd("~/Desktop/tumor-origin")
##############################
## functions
##############################
# truncate data names
trimSamples <- function(cancerSet, npar=TRUE, print=TRUE) {
newLabels <- list()
i <- 1
for(sample in colnames(cancerSet)) {
if(substring(sample,1,1) == "X") {
sample <- substring(sample,2,37)
} else {
sample <- substring(sample,1,36)
}
newLabels[i] = sample
i<-i+1
}
return(newLabels)
}
getData <- function (file, print=TRUE) {
temp_data = read.table(file, header=TRUE, stringsAsFactors=FALSE)
colnames(temp_data) = trimSamples(temp_data)
dim(temp_data)
row.names(temp_data) = temp_data$miRNA
temp_data = temp_data[-1] #trim repeated rownames
return(temp_data)
}
## BLCA: bladder
blca_data = getData("miR_counts_blca.txt")
dim(blca_data)
nrows(blca_data)
nrow(blca_data)
ncol(blca_data)
## BLCA: bladder
blca_data = getData("miR_counts_blca.txt")
ncol(blca_data)   # number of samples
#nrow(blca_data)   # number of miRNAs
## BRCA: breast
brca_data = getData("miR_counts_brca.txt")
ncol(brca_data)
## CHOL: bile duct
chol_data = getData("miR_counts_chol.txt")
ncol(chol_data)
## ESCA: esophagus
esca_data = getData("miR_counts_esca.txt")
ncol(esca_data)
## HNSC: head and neck
hnsc_data = getData("miR_counts_hnsc.txt")
ncol(hnsc_data)
## KICH: kidney chromophobe
kich_data = getData("miR_counts_kich.txt")
ncol(kich_data)
## KIRC: kidney renal clear cell
kirc_data = getData("miR_counts_kirc.txt")
ncol(kirc_data)
## LICH: liver
lich_data = getData("miR_counts_lich.txt")
ncol(lich_data)
## LUAD: lung
luad_data = getData("miR_counts_luad.txt")
ncol(luad_data)
## PRAD: prostate
prad_data = getData("miR_counts_prad.txt")
ncol(prad_data)
## STAD: stomach
stad_data = getData("miR_counts_stad.txt")
ncol(kirc_stad)
## THCA: thyroid
thca_data = getData("miR_counts_thca.txt")
ncol(thca_data)
## UCEC: uterus
ucec_data = getData("miR_counts_ucec.txt")
ncol(ucec_data)
#####
## PAAD: pancreas
paad_data = getData("miR_counts_paad.txt")
ncol(paad_data)
## SKCM: skin melanoma
skcm_data = getData("miR_counts_skcm.txt")
ncol(skcm_data)
## UCEC: uterus
ucec_data = getData("miR_counts_ucec.txt")
ncol(ucec_data)
ov_data = getData("miR_counts_ov.txt")
ncol(ov_data)
ncol(stad_data)
